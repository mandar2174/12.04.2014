    1  sudo apt-get update
    2  clear
    3  ls
    4  clear
    5  ls
    6  clear
    7  ls
    8  which gcc
    9  sudo apt-get install gcc
   10  clear
   11  mkdir cloudstack
   12  cd cloudstack/
   13  git clone https://github.com/openstack-dev/devstack.git
   14  sudo apt-get install git
   15  git clone https://github.com/openstack-dev/devstack.git
   16  cd devstack/
   17  ls
   18  ./stack.sh
   19  nova-manage service list
   20  clear
   21  cd /home/
   22  ls
   23  cd mandar/
   24  clear
   25  file /sbin/init
   26  java -version
   27  sudo mkdir -p /usr/local/java
   28  java -version
   29  cd /opt/stack/heat; bin/heat-api-cloudwatch --config-file=/etc/heat/heat.conf & echo $! >/opt/stack/status/stack/h-api-cw.pid; fg || echo "h-api-cw failed to start" | tee "/opt/stack/status/stack/h-api-cw.failure"
   30  cd /opt/stack/heat; bin/heat-api-cfn --config-file=/etc/heat/heat.conf & echo $! >/opt/stack/status/stack/h-api-cfn.pid; fg || echo "h-api-cfn failed to start" | tee "/opt/stack/status/stack/h-api-cfn.failure"
   31  cd /opt/stack/heat; bin/heat-api --config-file=/etc/heat/heat.conf & echo $! >/opt/stack/status/stack/h-api.pid; fg || echo "h-api failed to start" | tee "/opt/stack/status/stack/h-api.failure"
   32  cd /opt/stack/heat; bin/heat-engine --config-file=/etc/heat/heat.conf & echo $! >/opt/stack/status/stack/h-eng.pid; fg || echo "h-eng failed to start" | tee "/opt/stack/status/stack/h-eng.failure"
   33  cd /opt/stack/cinder && /usr/local/bin/cinder-volume --config-file /etc/cinder/cinder.conf & echo $! >/opt/stack/status/stack/c-vol.pid; fg || echo "c-vol failed to start" | tee "/opt/stack/status/stack/c-vol.failure"
   34  cd /opt/stack/cinder && /usr/local/bin/cinder-api --config-file /etc/cinder/cinder.conf & echo $! >/opt/stack/status/stack/c-api.pid; fg || echo "c-api failed to start" | tee "/opt/stack/status/stack/c-api.failure"
   35  cd /opt/stack/cinder && /usr/local/bin/cinder-scheduler --config-file /etc/cinder/cinder.conf & echo $! >/opt/stack/status/stack/c-sch.pid; fg || echo "c-sch failed to start" | tee "/opt/stack/status/stack/c-sch.failure"
   36  cd /opt/stack/nova && /usr/local/bin/nova-objectstore --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-obj.pid; fg || echo "n-obj failed to start" | tee "/opt/stack/status/stack/n-obj.failure"
   37  cd /opt/stack/nova && /usr/local/bin/nova-consoleauth --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-cauth.pid; fg || echo "n-cauth failed to start" | tee "/opt/stack/status/stack/n-cauth.failure"
   38  cd /opt/stack/nova && /usr/local/bin/nova-xvpvncproxy --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-xvnc.pid; fg || echo "n-xvnc failed to start" | tee "/opt/stack/status/stack/n-xvnc.failure"
   39  cd /opt/stack/nova && /usr/local/bin/nova-scheduler --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-sch.pid; fg || echo "n-sch failed to start" | tee "/opt/stack/status/stack/n-sch.failure"
   40  cd /opt/stack/nova && /usr/local/bin/nova-novncproxy --config-file /etc/nova/nova.conf --web /opt/stack/noVNC & echo $! >/opt/stack/status/stack/n-novnc.pid; fg || echo "n-novnc failed to start" | tee "/opt/stack/status/stack/n-novnc.failure"
   41  cd /opt/stack/nova && /usr/local/bin/nova-network --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-net.pid; fg || echo "n-net failed to start" | tee "/opt/stack/status/stack/n-net.failure"
   42  cd /opt/stack/nova && /usr/local/bin/nova-conductor --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-cond.pid; fg || echo "n-cond failed to start" | tee "/opt/stack/status/stack/n-cond.failure"
   43  cd /opt/stack/nova && /usr/local/bin/nova-api & echo $! >/opt/stack/status/stack/n-api.pid; fg || echo "n-api failed to start" | tee "/opt/stack/status/stack/n-api.failure"
   44  cd /opt/stack/nova && /usr/local/bin/nova-cert --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-crt.pid; fg || echo "n-crt failed to start" | tee "/opt/stack/status/stack/n-crt.failure"
   45  cd /opt/stack/nova && /usr/local/bin/nova-cert --config-file /etc/nova/nova.conf & echo $! >/opt/stack/status/stack/n-crt.pid; fg || echo "n-crt failed to start" | tee "/opt/stack/status/stack/n-crt.failure"
   46  cd /opt/stack/nova && sg libvirtd '/usr/local/bin/nova-compute --config-file /etc/nova/nova.conf' & echo $! >/opt/stack/status/stack/n-cpu.pid; fg || echo "n-cpu failed to start" | tee "/opt/stack/status/stack/n-cpu.failure"
   47  cd /opt/stack/glance; /usr/local/bin/glance-api --config-file=/etc/glance/glance-api.conf & echo $! >/opt/stack/status/stack/g-api.pid; fg || echo "g-api failed to start" | tee "/opt/stack/status/stack/g-api.failure"
   48  cd /opt/stack/glance; /usr/local/bin/glance-registry --config-file=/etc/glance/glance-registry.conf & echo $! >/opt/stack/status/stack/g-reg.pid; fg || echo "g-reg failed to start" | tee "/opt/stack/status/stack/g-reg.failure"
   49  ls
   50  java -version
   51  sudo apt-get install default-jre
   52  cd /usr/lib/jvm/java-1.6.0-openjdk/bin/
   53  ls
   54  cd ../
   55  cd /
   56  cd /home/mandar/
   57  clear
   58  dpkg --list | grep jdk
   59  java -version
   60  javac
   61  clear
   62  tar xvf Software/jdk-7u51-linux-i586.tar.gz -C /usr/lib/jvm/
   63  sudo tar xvf Software/jdk-7u51-linux-i586.tar.gz -C /usr/lib/jvm/
   64  cd /usr/lib/jvm/
   65  clear
   66  ls
   67  cd jdk1.7.0_51/
   68  ls
   69  cd bin/
   70  ls
   71  clear
   72  cd ../
   73  sudo ln -s jdk1.7.0_51/ java-1.7.0-sun-568
   74  sudo update-alternatives --config java
   75  vi ~/bashrc
   76  gedit ~./bashrc
   77  clear
   78  vi ~/bashrc
   79  clear
   80  pwd
   81  cd cloudstack/
   82  ls
   83  cd devstack/
   84  ls
   85  clear
   86  java -version
   87  clear
   88  java -version
   89  clear
   90  vi ~/.bashrc
   91  vi ~/bashrc
   92  vi ~/.bashrc
   93  vim ~/.bashrc
   94  sudo apt-get install vim
   95  vim ~/.bashrc
   96  clear
   97  echo $JAVA_HOME
   98  java -version
   99  sudo apt-get update
  100  sudo apt-get install hudson
  101  ls /etc/apt/sources.list.d/
  102  sudo sh -c "echo 'deb http://hudson-ci.org/debian binary/' \
  103  > /etc/apt/sources.list.d/hudson.list"
  104  sudo sh -c "echo 'deb http://hudson-ci.org/debian binary/' \
  105  > /etc/apt/sources.list.d/hudson.list"
  106  sudo apt-get update
  107  sudo vim /etc/apt/sources.list.d/hudson.list 
  108  sudo apt-get update
  109  sudo vim /etc/apt/sources.list.d/hudson.list 
  110  sudo apt-get update
  111  cd Software/
  112  ls
  113  cd eclipse/
  114  chmod 777 *
  115  ls
  116  cd ../
  117  ls
  118  cd apache-log4j-2.0-rc1-bin/
  119  pwd
  120  clear
  121  echo $CLASSPATH
  122  ls
  123  cd Software/
  124  ls
  125  tar -xvf apache-log4j-2.0-rc1-bin.tar.gz 
  126  clear
  127  export CLASSPATH=$CLASSPATH:/home/mandar/Software/apache-log4j-2.0-rc1-bin/log4j-api-2.0-rc1.jar
  128  export CLASSPATH=$CLASSPATH:/home/mandar/Software/apache-log4j-2.0-rc1-bin/log4j-core-2.0-rc1.jar
  129  echo $CLASSPATH
  130  clear
  131  export PATH=$PATH:/home/mandar/Software/apache-log4j-2.0-rc1-bin/
  132  sudo apt-get install gcc
  133  sudo apt-get install gdb
  134  sudo apt-get install emac
  135  sudo apt-get install ruby
  136  sudo apt-get install rubygems
  137  gem list
  138  gem install myswl
  139  gem install mysql
  140  sudo gem install mysql
  141  clear
  142  sudo apt-get install git-core
  143  sudo apt-get install git
  144  clear
  145  cd ~/.ssh
  146  ssh-keygen -t rsa -c "mandar2174@gmail.com"
  147  clear
  148  ssh-keygen -t rsa -c "mandar2174@gmail.com"
  149  clear
  150  sudo apt-get update
  151  clear
  152  ssh-keygen -t rsa -C "mandar2174@gmail.com" 
  153  vi /home/mandar/.ssh/id_rsa.pub 
  154  ssh-add
  155  clear
  156  sudo apt-get install git-core git-gui git-doc 
  157  mkdir git-repo
  158  cd git-repo/
  159  git config --global user.name "mandar2174"
  160  git config --global user.email  "mandar2174@gmail.com"
  161  git config --global user.name "mandar2174@gmail.com"
  162  git clone git@github.com:mandar2174@gmail.com/mandar
  163  git clone https://github.com/mandar2174/mandar.git
  164  ls
  165  cd mandar/
  166  ls
  167  cd ../
  168  ls
  169  vi SampleFile
  170  git add SampleFile
  171  git config --global user.name "mandar2174"
  172  git config --global user.email "mandar2174@gmail.com"
  173  git add SampleFile
  174  git list
  175  git --help
  176  clear
  177  cd ../
  178  ls
  179  ls -al
  180  vi .gitconfig clear
  181  clear
  182  cd git-repo/
  183  git status
  184  cd ../
  185  git status
  186  cd git-repo/
  187  ls
  188  git add SampleFile
  189  cd ../
  190  ls -al | grep "g.*"
  191  vi .gitconfig 
  192  cd git-repo/
  193  git config --global credential.helper cache
  194  git config --global credential.helper 'cache --timeout=3600'
  195  git init
  196  ls
  197  git add SampleFile
  198  git commit -m 'This is file upload on dated 10.04.2014'
  199  git remote add origin https://github.com/mandar/Hello-World.git
  200  git push origin master
  201  git remote add origin https://github.com/mandar2174/Hello-World.git
  202  clear
  203  git remote add origin https://github.com/mandar2174/Hello-World.git
  204  git remote -v
  205  git remote add origin https://github.com/mandar21745/Hello-World.git
  206  clear
  207  git remote -v
  208  git remote add myorigin https://github.com/mandar2174/Hello-World.git
  209  git push myorigin master
  210  ls -al
  211  touch README
  212  ls -al
  213  git add README
  214  git commit -m 'Added by Mandar'
  215  git remote add myorigin https://github.com/mandar2174/git-repo.git
  216  git remote add myorigin1 https://github.com/mandar2174/git-repo.git
  217  git push myorigin1 master
  218  pwd
  219  cd git-repo/
  220  ls
  221  clear
  222  ls -al
  223  vi README 
  224  git add README
  225  clear
  226  git remote add m1 https://github.com/mandar2174/README.git
  227  git push m1 master
  228  git push m1 master/refs
  229  clear
  230  git pull
  231  git -config
  232  git --config
  233  clear
  234  git --config
  235  cd /home/
  236  ls
  237  cd mandar/
  238  ls
  239  mkdir uuu
  240  cd uuu/
  241  git init
  242  clear
  243  git pull https://github.com/mandar2174/mandar.git
  244  ls
  245  vi README 
  246  git commit -am "commining again""

  247  git commit -am "commining again"
  248  clear
  249  git push 
  250  git push https://github.com/mandar2174/mandar.git
  251  ls
  252  vi README 
  253  git commit -am "commining again"
  254  git push https://github.com/mandar2174/mandar.git
  255  cd ../
  256  ls
  257  cd uuu/
  258  ls
  259  clear
  260  mkdir SampleData
  261  cd SampleData/
  262  vi test
  263  clear
  264  ls
  265  cd ..
  266  cd SampleData/
  267  ls
  268  git add tes
  269  git add test
  270  cd ..
  271  git add test
  272  clear
  273  ls
  274  git add SampleData/
  275  git commit SampleData/
  276  ls
  277  git push https://github.com/mandar2174/12.04.2014.git
  278  git pull https://github.com/mandar2174/12.04.2014.git
  279  git clone https://github.com/mandar2174/12.04.2014.git
  280  git push https://github.com/mandar2174/12.04.2014.git
  281  git remote add origin https://github.com/mandar2174/12.04.2014.git
  282  git push -u origin master
  283  ls
  284  cat history
  285  history 
  286  history > git_info


Step:
How to upload any file:

1)create the folder/file
2)add that file to local-repository using the following command:
git add filename/foldername

3)commit the changes to local repository
git commit filename/foldername -m "message to be added while adding file"

4)push the changes to the remote repository which on the github
if repository is not there then create the repository
push the changes to repo:
git push https://github.com/mandar2174/12.04.2014.git

it will ask for the user name and password use the following crediantional:
gitusername:mandar2174
password:9766744052mandar

it will add the data(folder and file )to your remote repo

Step:
How to delete any file from the repo

1)delete the file from local repo using following command
git rm file_name

2)commit the changes after removing the file from the local repository
git commit -m "message to be added"

3)push the changes to the remote repository so that file also deleted from the 
remote repository

git push https://github.com/mandar2174/12.04.2014.git

it will ask for the user name and password use the following crediantional:
gitusername:mandar2174
password:9766744052mandar

it will remove the data(folder and file )to your remote repo


